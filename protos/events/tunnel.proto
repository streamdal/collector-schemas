syntax = "proto3";

package events;

import "outbound.proto";

option go_package = "github.com/batchcorp/collector-schemas/build/go/protos/events";
option java_package = "sh.batch.services";
option java_multiple_files = true;

// Tunnel is an envelope message for tunnel communication between dproxy and plumber
message Tunnel {

  enum Type {
    UNSET = 0;

    // Sent by plumber to dProxy
    AUTH_REQUEST = 1;

    // Sent by dProxy to plumber
    AUTH_RESPONSE = 2;

    // Sent by dProxy to plumber
    // Contains an events.Outbound message with a replay payload
    OUTBOUND_MESSAGE = 3;

    // Sent by dProxy to plumber
    // Replicates an ISB replay event message for display in plumber logs
    REPLAY_EVENT = 4;

    // Sent by dProxy to plumber
    // Currently only used for force-disconnecting an ephemeral tunnel
    TUNNEL_EVENT = 5;
  }

  Type type = 1;

  string replay_id = 2;

  oneof payload {
    AuthRequest auth_request = 100;

    AuthResponse auth_response = 101;

    events.Outbound outbound_message = 102;

    ReplayEvent replay_message = 103;

    TunnelEvent tunnel_event = 104;
  }
}

message AuthRequest {
  // API Token generated in https://console.batch.sh
  string token = 1;

  // Message bus type name, ex: kafka, rabbitmq, etc.
  string message_bus = 2;

  // Tunnels can be given a custom name to help identify them in the plumber server.
  // If this value is empty, a default name will be generated based off of message_bus and the
  // connecting IP address
  string name = 3;

  // Plumber server mode needs permanent tunnels without creating multiple
  // destinations in console for all running plumber instances  in a cluster.
  // If cluster ID is specified, we will use that + team ID + connection ID = unique identifier
  // so that we can always reconnect to the same tunnel.
  //
  // Tunnels without this value specified will be created as ephemeral tunnels.
  // Ephemeral tunnels will be deleted after 3 hours of inactivity.
  string plumber_cluster_id = 4;

  string tunnel_id = 5;
}

message AuthResponse {
  // Whether or not the connection is authorized
  bool authorized = 1;

  // Error message if any
  string message = 2;
}

message DeleteTunnelRequest {
  // API Token generated in https://console.batch.sh
  string token = 1;

  string plumber_cluster_id = 2;

  string tunnel_id = 3;
}

message DeleteTunnelResponse {
  bool success = 1;

  string message = 2;
}

message ReplayEvent {
  enum Type {
    UNSET = 0;
    CREATE_REPLAY = 1;
    PAUSE_REPLAY = 2;
    RESUME_REPLAY = 3;
    ABORT_REPLAY = 4;
    FINISH_REPLAY = 5;
    DISCONNECT = 6;
  }

  Type type = 1;
  string replay_id = 2;
}

message TunnelEvent {
  enum Type {
    UNSET = 0;

    // Used when an ephemeral tunnel destination is deleted from ui-bff
    // This action will cause dProxy to send this event, forcing plumber to disconnect
    FORCE_DISCONNECT = 1;
  }

  Type type = 1;

  string tunnel_id = 2;
}