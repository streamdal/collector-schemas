// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: cs_events_tunnel.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tunnel_Type int32

const (
	Tunnel_UNSET Tunnel_Type = 0
	// Sent by plumber to dProxy
	Tunnel_AUTH_REQUEST Tunnel_Type = 1
	// Sent by dProxy to plumber
	Tunnel_AUTH_RESPONSE Tunnel_Type = 2
	// Sent by dProxy to plumber
	// Contains an events.Outbound message with a replay payload
	Tunnel_OUTBOUND_MESSAGE Tunnel_Type = 3
	// Sent by dProxy to plumber
	// Replicates an ISB replay event message for display in plumber logs
	Tunnel_REPLAY_EVENT Tunnel_Type = 4
	// Sent by dProxy to plumber
	// Currently only used for force-disconnecting an ephemeral tunnel
	Tunnel_TUNNEL_EVENT Tunnel_Type = 5
)

// Enum value maps for Tunnel_Type.
var (
	Tunnel_Type_name = map[int32]string{
		0: "UNSET",
		1: "AUTH_REQUEST",
		2: "AUTH_RESPONSE",
		3: "OUTBOUND_MESSAGE",
		4: "REPLAY_EVENT",
		5: "TUNNEL_EVENT",
	}
	Tunnel_Type_value = map[string]int32{
		"UNSET":            0,
		"AUTH_REQUEST":     1,
		"AUTH_RESPONSE":    2,
		"OUTBOUND_MESSAGE": 3,
		"REPLAY_EVENT":     4,
		"TUNNEL_EVENT":     5,
	}
)

func (x Tunnel_Type) Enum() *Tunnel_Type {
	p := new(Tunnel_Type)
	*p = x
	return p
}

func (x Tunnel_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tunnel_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_events_tunnel_proto_enumTypes[0].Descriptor()
}

func (Tunnel_Type) Type() protoreflect.EnumType {
	return &file_cs_events_tunnel_proto_enumTypes[0]
}

func (x Tunnel_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tunnel_Type.Descriptor instead.
func (Tunnel_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{0, 0}
}

type ReplayEvent_Type int32

const (
	ReplayEvent_UNSET         ReplayEvent_Type = 0
	ReplayEvent_CREATE_REPLAY ReplayEvent_Type = 1
	ReplayEvent_PAUSE_REPLAY  ReplayEvent_Type = 2
	ReplayEvent_RESUME_REPLAY ReplayEvent_Type = 3
	ReplayEvent_ABORT_REPLAY  ReplayEvent_Type = 4
	ReplayEvent_FINISH_REPLAY ReplayEvent_Type = 5
	ReplayEvent_DISCONNECT    ReplayEvent_Type = 6
)

// Enum value maps for ReplayEvent_Type.
var (
	ReplayEvent_Type_name = map[int32]string{
		0: "UNSET",
		1: "CREATE_REPLAY",
		2: "PAUSE_REPLAY",
		3: "RESUME_REPLAY",
		4: "ABORT_REPLAY",
		5: "FINISH_REPLAY",
		6: "DISCONNECT",
	}
	ReplayEvent_Type_value = map[string]int32{
		"UNSET":         0,
		"CREATE_REPLAY": 1,
		"PAUSE_REPLAY":  2,
		"RESUME_REPLAY": 3,
		"ABORT_REPLAY":  4,
		"FINISH_REPLAY": 5,
		"DISCONNECT":    6,
	}
)

func (x ReplayEvent_Type) Enum() *ReplayEvent_Type {
	p := new(ReplayEvent_Type)
	*p = x
	return p
}

func (x ReplayEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplayEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_events_tunnel_proto_enumTypes[1].Descriptor()
}

func (ReplayEvent_Type) Type() protoreflect.EnumType {
	return &file_cs_events_tunnel_proto_enumTypes[1]
}

func (x ReplayEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplayEvent_Type.Descriptor instead.
func (ReplayEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{5, 0}
}

type TunnelEvent_Type int32

const (
	TunnelEvent_UNSET TunnelEvent_Type = 0
	// Used when an ephemeral tunnel destination is deleted from ui-bff
	// This action will cause dProxy to send this event, forcing plumber to disconnect
	TunnelEvent_FORCE_DISCONNECT TunnelEvent_Type = 1
)

// Enum value maps for TunnelEvent_Type.
var (
	TunnelEvent_Type_name = map[int32]string{
		0: "UNSET",
		1: "FORCE_DISCONNECT",
	}
	TunnelEvent_Type_value = map[string]int32{
		"UNSET":            0,
		"FORCE_DISCONNECT": 1,
	}
)

func (x TunnelEvent_Type) Enum() *TunnelEvent_Type {
	p := new(TunnelEvent_Type)
	*p = x
	return p
}

func (x TunnelEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs_events_tunnel_proto_enumTypes[2].Descriptor()
}

func (TunnelEvent_Type) Type() protoreflect.EnumType {
	return &file_cs_events_tunnel_proto_enumTypes[2]
}

func (x TunnelEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelEvent_Type.Descriptor instead.
func (TunnelEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{6, 0}
}

// Tunnel is an envelope message for tunnel communication between dproxy and plumber
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Tunnel_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Tunnel_Type" json:"type,omitempty"`
	ReplayId string      `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Tunnel_AuthRequest
	//	*Tunnel_AuthResponse
	//	*Tunnel_OutboundMessage
	//	*Tunnel_ReplayMessage
	//	*Tunnel_TunnelEvent
	Payload isTunnel_Payload `protobuf_oneof:"payload"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *Tunnel) GetType() Tunnel_Type {
	if x != nil {
		return x.Type
	}
	return Tunnel_UNSET
}

func (x *Tunnel) GetReplayId() string {
	if x != nil {
		return x.ReplayId
	}
	return ""
}

func (m *Tunnel) GetPayload() isTunnel_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Tunnel) GetAuthRequest() *AuthRequest {
	if x, ok := x.GetPayload().(*Tunnel_AuthRequest); ok {
		return x.AuthRequest
	}
	return nil
}

func (x *Tunnel) GetAuthResponse() *AuthResponse {
	if x, ok := x.GetPayload().(*Tunnel_AuthResponse); ok {
		return x.AuthResponse
	}
	return nil
}

func (x *Tunnel) GetOutboundMessage() *Outbound {
	if x, ok := x.GetPayload().(*Tunnel_OutboundMessage); ok {
		return x.OutboundMessage
	}
	return nil
}

func (x *Tunnel) GetReplayMessage() *ReplayEvent {
	if x, ok := x.GetPayload().(*Tunnel_ReplayMessage); ok {
		return x.ReplayMessage
	}
	return nil
}

func (x *Tunnel) GetTunnelEvent() *TunnelEvent {
	if x, ok := x.GetPayload().(*Tunnel_TunnelEvent); ok {
		return x.TunnelEvent
	}
	return nil
}

type isTunnel_Payload interface {
	isTunnel_Payload()
}

type Tunnel_AuthRequest struct {
	AuthRequest *AuthRequest `protobuf:"bytes,100,opt,name=auth_request,json=authRequest,proto3,oneof"`
}

type Tunnel_AuthResponse struct {
	AuthResponse *AuthResponse `protobuf:"bytes,101,opt,name=auth_response,json=authResponse,proto3,oneof"`
}

type Tunnel_OutboundMessage struct {
	OutboundMessage *Outbound `protobuf:"bytes,102,opt,name=outbound_message,json=outboundMessage,proto3,oneof"`
}

type Tunnel_ReplayMessage struct {
	ReplayMessage *ReplayEvent `protobuf:"bytes,103,opt,name=replay_message,json=replayMessage,proto3,oneof"`
}

type Tunnel_TunnelEvent struct {
	TunnelEvent *TunnelEvent `protobuf:"bytes,104,opt,name=tunnel_event,json=tunnelEvent,proto3,oneof"`
}

func (*Tunnel_AuthRequest) isTunnel_Payload() {}

func (*Tunnel_AuthResponse) isTunnel_Payload() {}

func (*Tunnel_OutboundMessage) isTunnel_Payload() {}

func (*Tunnel_ReplayMessage) isTunnel_Payload() {}

func (*Tunnel_TunnelEvent) isTunnel_Payload() {}

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API Token generated in https://console.batch.sh
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Message bus type name, ex: kafka, rabbitmq, etc.
	MessageBus string `protobuf:"bytes,2,opt,name=message_bus,json=messageBus,proto3" json:"message_bus,omitempty"`
	// Tunnels can be given a custom name to help identify them in the plumber server.
	// If this value is empty, a default name will be generated based off of message_bus and the
	// connecting IP address
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Plumber server mode needs permanent tunnels without creating multiple
	// destinations in console for all running plumber instances  in a cluster.
	// If cluster ID is specified, we will use that + team ID + connection ID = unique identifier
	// so that we can always reconnect to the same tunnel.
	//
	// Tunnels without this value specified will be created as ephemeral tunnels.
	// Ephemeral tunnels will be deleted after 3 hours of inactivity.
	PlumberClusterId string `protobuf:"bytes,4,opt,name=plumber_cluster_id,json=plumberClusterId,proto3" json:"plumber_cluster_id,omitempty"`
	TunnelId         string `protobuf:"bytes,5,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	// Version of plumber running. Not needed at the moment, but good future-proofing
	PlumberVersion string `protobuf:"bytes,6,opt,name=plumber_version,json=plumberVersion,proto3" json:"plumber_version,omitempty"`
	// ID of the plumber instance running. This will be saved in either NATS or ~/.batchsh/plumber.json
	PlumberId string `protobuf:"bytes,7,opt,name=plumber_id,json=plumberId,proto3" json:"plumber_id,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *AuthRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthRequest) GetMessageBus() string {
	if x != nil {
		return x.MessageBus
	}
	return ""
}

func (x *AuthRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthRequest) GetPlumberClusterId() string {
	if x != nil {
		return x.PlumberClusterId
	}
	return ""
}

func (x *AuthRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *AuthRequest) GetPlumberVersion() string {
	if x != nil {
		return x.PlumberVersion
	}
	return ""
}

func (x *AuthRequest) GetPlumberId() string {
	if x != nil {
		return x.PlumberId
	}
	return ""
}

type AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the connection is authorized
	Authorized bool `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty"`
	// Error message if any
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AuthResponse) Reset() {
	*x = AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponse) ProtoMessage() {}

func (x *AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponse.ProtoReflect.Descriptor instead.
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *AuthResponse) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *AuthResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API Token generated in https://console.batch.sh
	Token            string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PlumberClusterId string `protobuf:"bytes,2,opt,name=plumber_cluster_id,json=plumberClusterId,proto3" json:"plumber_cluster_id,omitempty"`
	TunnelId         string `protobuf:"bytes,3,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *DeleteTunnelRequest) Reset() {
	*x = DeleteTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelRequest) ProtoMessage() {}

func (x *DeleteTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelRequest.ProtoReflect.Descriptor instead.
func (*DeleteTunnelRequest) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteTunnelRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeleteTunnelRequest) GetPlumberClusterId() string {
	if x != nil {
		return x.PlumberClusterId
	}
	return ""
}

func (x *DeleteTunnelRequest) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

type DeleteTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTunnelResponse) Reset() {
	*x = DeleteTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTunnelResponse) ProtoMessage() {}

func (x *DeleteTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTunnelResponse.ProtoReflect.Descriptor instead.
func (*DeleteTunnelResponse) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteTunnelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTunnelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ReplayEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ReplayEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.ReplayEvent_Type" json:"type,omitempty"`
	ReplayId string           `protobuf:"bytes,2,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty"`
}

func (x *ReplayEvent) Reset() {
	*x = ReplayEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayEvent) ProtoMessage() {}

func (x *ReplayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayEvent.ProtoReflect.Descriptor instead.
func (*ReplayEvent) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *ReplayEvent) GetType() ReplayEvent_Type {
	if x != nil {
		return x.Type
	}
	return ReplayEvent_UNSET
}

func (x *ReplayEvent) GetReplayId() string {
	if x != nil {
		return x.ReplayId
	}
	return ""
}

type TunnelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     TunnelEvent_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.TunnelEvent_Type" json:"type,omitempty"`
	TunnelId string           `protobuf:"bytes,2,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
}

func (x *TunnelEvent) Reset() {
	*x = TunnelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs_events_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEvent) ProtoMessage() {}

func (x *TunnelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cs_events_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEvent.ProtoReflect.Descriptor instead.
func (*TunnelEvent) Descriptor() ([]byte, []int) {
	return file_cs_events_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelEvent) GetType() TunnelEvent_Type {
	if x != nil {
		return x.Type
	}
	return TunnelEvent_UNSET
}

func (x *TunnelEvent) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

var File_cs_events_tunnel_proto protoreflect.FileDescriptor

var file_cs_events_tunnel_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x18, 0x63, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x03, 0x0a, 0x06, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0x7e, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x22, 0x81, 0x01,
	0x0a, 0x0b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x42, 0x54, 0x0a, 0x11, 0x73, 0x68, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs_events_tunnel_proto_rawDescOnce sync.Once
	file_cs_events_tunnel_proto_rawDescData = file_cs_events_tunnel_proto_rawDesc
)

func file_cs_events_tunnel_proto_rawDescGZIP() []byte {
	file_cs_events_tunnel_proto_rawDescOnce.Do(func() {
		file_cs_events_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs_events_tunnel_proto_rawDescData)
	})
	return file_cs_events_tunnel_proto_rawDescData
}

var file_cs_events_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cs_events_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cs_events_tunnel_proto_goTypes = []interface{}{
	(Tunnel_Type)(0),             // 0: events.Tunnel.Type
	(ReplayEvent_Type)(0),        // 1: events.ReplayEvent.Type
	(TunnelEvent_Type)(0),        // 2: events.TunnelEvent.Type
	(*Tunnel)(nil),               // 3: events.Tunnel
	(*AuthRequest)(nil),          // 4: events.AuthRequest
	(*AuthResponse)(nil),         // 5: events.AuthResponse
	(*DeleteTunnelRequest)(nil),  // 6: events.DeleteTunnelRequest
	(*DeleteTunnelResponse)(nil), // 7: events.DeleteTunnelResponse
	(*ReplayEvent)(nil),          // 8: events.ReplayEvent
	(*TunnelEvent)(nil),          // 9: events.TunnelEvent
	(*Outbound)(nil),             // 10: events.Outbound
}
var file_cs_events_tunnel_proto_depIdxs = []int32{
	0,  // 0: events.Tunnel.type:type_name -> events.Tunnel.Type
	4,  // 1: events.Tunnel.auth_request:type_name -> events.AuthRequest
	5,  // 2: events.Tunnel.auth_response:type_name -> events.AuthResponse
	10, // 3: events.Tunnel.outbound_message:type_name -> events.Outbound
	8,  // 4: events.Tunnel.replay_message:type_name -> events.ReplayEvent
	9,  // 5: events.Tunnel.tunnel_event:type_name -> events.TunnelEvent
	1,  // 6: events.ReplayEvent.type:type_name -> events.ReplayEvent.Type
	2,  // 7: events.TunnelEvent.type:type_name -> events.TunnelEvent.Type
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_cs_events_tunnel_proto_init() }
func file_cs_events_tunnel_proto_init() {
	if File_cs_events_tunnel_proto != nil {
		return
	}
	file_cs_events_outbound_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs_events_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplayEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs_events_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs_events_tunnel_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Tunnel_AuthRequest)(nil),
		(*Tunnel_AuthResponse)(nil),
		(*Tunnel_OutboundMessage)(nil),
		(*Tunnel_ReplayMessage)(nil),
		(*Tunnel_TunnelEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs_events_tunnel_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cs_events_tunnel_proto_goTypes,
		DependencyIndexes: file_cs_events_tunnel_proto_depIdxs,
		EnumInfos:         file_cs_events_tunnel_proto_enumTypes,
		MessageInfos:      file_cs_events_tunnel_proto_msgTypes,
	}.Build()
	File_cs_events_tunnel_proto = out.File
	file_cs_events_tunnel_proto_rawDesc = nil
	file_cs_events_tunnel_proto_goTypes = nil
	file_cs_events_tunnel_proto_depIdxs = nil
}
