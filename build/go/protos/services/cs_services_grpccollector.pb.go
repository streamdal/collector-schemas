// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: services/cs_services_grpccollector.proto

package services

import (
	common "github.com/batchcorp/collector-schemas/build/go/protos/common"
	records "github.com/batchcorp/collector-schemas/build/go/protos/records"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenericRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.GenericRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GenericRecordRequest) Reset() {
	*x = GenericRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRecordRequest) ProtoMessage() {}

func (x *GenericRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRecordRequest.ProtoReflect.Descriptor instead.
func (*GenericRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{0}
}

func (x *GenericRecordRequest) GetRecords() []*records.GenericRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GenericRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GenericRecordResponse) Reset() {
	*x = GenericRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRecordResponse) ProtoMessage() {}

func (x *GenericRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRecordResponse.ProtoReflect.Descriptor instead.
func (*GenericRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{1}
}

func (x *GenericRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *GenericRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AMQPRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.AMQPSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AMQPRecordRequest) Reset() {
	*x = AMQPRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMQPRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMQPRecordRequest) ProtoMessage() {}

func (x *AMQPRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMQPRecordRequest.ProtoReflect.Descriptor instead.
func (*AMQPRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{2}
}

func (x *AMQPRecordRequest) GetRecords() []*records.AMQPSinkRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AMQPRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AMQPRecordResponse) Reset() {
	*x = AMQPRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMQPRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMQPRecordResponse) ProtoMessage() {}

func (x *AMQPRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMQPRecordResponse.ProtoReflect.Descriptor instead.
func (*AMQPRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{3}
}

func (x *AMQPRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *AMQPRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type KafkaSinkRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.KafkaSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *KafkaSinkRecordRequest) Reset() {
	*x = KafkaSinkRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaSinkRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSinkRecordRequest) ProtoMessage() {}

func (x *KafkaSinkRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSinkRecordRequest.ProtoReflect.Descriptor instead.
func (*KafkaSinkRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaSinkRecordRequest) GetRecords() []*records.KafkaSinkRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type KafkaSinkRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KafkaSinkRecordResponse) Reset() {
	*x = KafkaSinkRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaSinkRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaSinkRecordResponse) ProtoMessage() {}

func (x *KafkaSinkRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaSinkRecordResponse.ProtoReflect.Descriptor instead.
func (*KafkaSinkRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{5}
}

func (x *KafkaSinkRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *KafkaSinkRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type SQSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.SQSRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *SQSRecordRequest) Reset() {
	*x = SQSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQSRecordRequest) ProtoMessage() {}

func (x *SQSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQSRecordRequest.ProtoReflect.Descriptor instead.
func (*SQSRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{6}
}

func (x *SQSRecordRequest) GetRecords() []*records.SQSRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type SQSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SQSRecordResponse) Reset() {
	*x = SQSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQSRecordResponse) ProtoMessage() {}

func (x *SQSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQSRecordResponse.ProtoReflect.Descriptor instead.
func (*SQSRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{7}
}

func (x *SQSRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *SQSRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AzureRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.AzureSinkRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *AzureRecordRequest) Reset() {
	*x = AzureRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureRecordRequest) ProtoMessage() {}

func (x *AzureRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureRecordRequest.ProtoReflect.Descriptor instead.
func (*AzureRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{8}
}

func (x *AzureRecordRequest) GetRecords() []*records.AzureSinkRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AzureRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AzureRecordResponse) Reset() {
	*x = AzureRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureRecordResponse) ProtoMessage() {}

func (x *AzureRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureRecordResponse.ProtoReflect.Descriptor instead.
func (*AzureRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{9}
}

func (x *AzureRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *AzureRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GCPRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.GCPRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GCPRecordRequest) Reset() {
	*x = GCPRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPRecordRequest) ProtoMessage() {}

func (x *GCPRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPRecordRequest.ProtoReflect.Descriptor instead.
func (*GCPRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{10}
}

func (x *GCPRecordRequest) GetRecords() []*records.GCPRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GCPRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GCPRecordResponse) Reset() {
	*x = GCPRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPRecordResponse) ProtoMessage() {}

func (x *GCPRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPRecordResponse.ProtoReflect.Descriptor instead.
func (*GCPRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{11}
}

func (x *GCPRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *GCPRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RedisRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.RedisRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RedisRecordRequest) Reset() {
	*x = RedisRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRecordRequest) ProtoMessage() {}

func (x *RedisRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRecordRequest.ProtoReflect.Descriptor instead.
func (*RedisRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{12}
}

func (x *RedisRecordRequest) GetRecords() []*records.RedisRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type RedisRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RedisRecordResponse) Reset() {
	*x = RedisRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRecordResponse) ProtoMessage() {}

func (x *RedisRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRecordResponse.ProtoReflect.Descriptor instead.
func (*RedisRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{13}
}

func (x *RedisRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *RedisRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RedisStreamsRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.RedisStreamsRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RedisStreamsRecordRequest) Reset() {
	*x = RedisStreamsRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisStreamsRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisStreamsRecordRequest) ProtoMessage() {}

func (x *RedisStreamsRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisStreamsRecordRequest.ProtoReflect.Descriptor instead.
func (*RedisStreamsRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{14}
}

func (x *RedisStreamsRecordRequest) GetRecords() []*records.RedisStreamsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type RedisStreamsRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RedisStreamsRecordResponse) Reset() {
	*x = RedisStreamsRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisStreamsRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisStreamsRecordResponse) ProtoMessage() {}

func (x *RedisStreamsRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisStreamsRecordResponse.ProtoReflect.Descriptor instead.
func (*RedisStreamsRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{15}
}

func (x *RedisStreamsRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *RedisStreamsRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type MQTTRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.MQTTRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *MQTTRecordRequest) Reset() {
	*x = MQTTRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTRecordRequest) ProtoMessage() {}

func (x *MQTTRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTRecordRequest.ProtoReflect.Descriptor instead.
func (*MQTTRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{16}
}

func (x *MQTTRecordRequest) GetRecords() []*records.MQTTRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type MQTTRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MQTTRecordResponse) Reset() {
	*x = MQTTRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTRecordResponse) ProtoMessage() {}

func (x *MQTTRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTRecordResponse.ProtoReflect.Descriptor instead.
func (*MQTTRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{17}
}

func (x *MQTTRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *MQTTRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NSQRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.NSQRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *NSQRecordRequest) Reset() {
	*x = NSQRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NSQRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NSQRecordRequest) ProtoMessage() {}

func (x *NSQRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NSQRecordRequest.ProtoReflect.Descriptor instead.
func (*NSQRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{18}
}

func (x *NSQRecordRequest) GetRecords() []*records.NSQRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type NSQRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NSQRecordResponse) Reset() {
	*x = NSQRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NSQRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NSQRecordResponse) ProtoMessage() {}

func (x *NSQRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NSQRecordResponse.ProtoReflect.Descriptor instead.
func (*NSQRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{19}
}

func (x *NSQRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *NSQRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type KubeMQRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.KubeMQRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *KubeMQRecordRequest) Reset() {
	*x = KubeMQRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeMQRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeMQRecordRequest) ProtoMessage() {}

func (x *KubeMQRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeMQRecordRequest.ProtoReflect.Descriptor instead.
func (*KubeMQRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{20}
}

func (x *KubeMQRecordRequest) GetRecords() []*records.KubeMQRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type KubeMQRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KubeMQRecordResponse) Reset() {
	*x = KubeMQRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeMQRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeMQRecordResponse) ProtoMessage() {}

func (x *KubeMQRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeMQRecordResponse.ProtoReflect.Descriptor instead.
func (*KubeMQRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{21}
}

func (x *KubeMQRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *KubeMQRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NATSRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.NATSRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *NATSRecordRequest) Reset() {
	*x = NATSRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSRecordRequest) ProtoMessage() {}

func (x *NATSRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSRecordRequest.ProtoReflect.Descriptor instead.
func (*NATSRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{22}
}

func (x *NATSRecordRequest) GetRecords() []*records.NATSRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type NATSRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NATSRecordResponse) Reset() {
	*x = NATSRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSRecordResponse) ProtoMessage() {}

func (x *NATSRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSRecordResponse.ProtoReflect.Descriptor instead.
func (*NATSRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{23}
}

func (x *NATSRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *NATSRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NATSJetStreamRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.NATSJetStreamRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *NATSJetStreamRecordRequest) Reset() {
	*x = NATSJetStreamRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSJetStreamRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSJetStreamRecordRequest) ProtoMessage() {}

func (x *NATSJetStreamRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSJetStreamRecordRequest.ProtoReflect.Descriptor instead.
func (*NATSJetStreamRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{24}
}

func (x *NATSJetStreamRecordRequest) GetRecords() []*records.NATSJetStreamRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type NATSJetStreamRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NATSJetStreamRecordResponse) Reset() {
	*x = NATSJetStreamRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSJetStreamRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSJetStreamRecordResponse) ProtoMessage() {}

func (x *NATSJetStreamRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSJetStreamRecordResponse.ProtoReflect.Descriptor instead.
func (*NATSJetStreamRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{25}
}

func (x *NATSJetStreamRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *NATSJetStreamRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NATSStreamingRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*records.NATSStreamingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *NATSStreamingRecordRequest) Reset() {
	*x = NATSStreamingRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSStreamingRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSStreamingRecordRequest) ProtoMessage() {}

func (x *NATSStreamingRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSStreamingRecordRequest.ProtoReflect.Descriptor instead.
func (*NATSStreamingRecordRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{26}
}

func (x *NATSStreamingRecordRequest) GetRecords() []*records.NATSStreamingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type NATSStreamingRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRecordsProcessed int64          `protobuf:"varint,1,opt,name=num_records_processed,json=numRecordsProcessed,proto3" json:"num_records_processed,omitempty"`
	Status              *common.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *NATSStreamingRecordResponse) Reset() {
	*x = NATSStreamingRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATSStreamingRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATSStreamingRecordResponse) ProtoMessage() {}

func (x *NATSStreamingRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATSStreamingRecordResponse.ProtoReflect.Descriptor instead.
func (*NATSStreamingRecordResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{27}
}

func (x *NATSStreamingRecordResponse) GetNumRecordsProcessed() int64 {
	if x != nil {
		return x.NumRecordsProcessed
	}
	return 0
}

func (x *NATSStreamingRecordResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type TestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{28}
}

type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *common.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_cs_services_grpccollector_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_cs_services_grpccollector_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_services_cs_services_grpccollector_proto_rawDescGZIP(), []int{29}
}

func (x *TestResponse) GetStatus() *common.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_services_cs_services_grpccollector_proto protoreflect.FileDescriptor

var file_services_cs_services_grpccollector_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e,
	0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x71,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x73, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x11, 0x41, 0x4d, 0x51, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x4d, 0x51, 0x50, 0x53, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x70,
	0x0a, 0x12, 0x41, 0x4d, 0x51, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4c, 0x0a, 0x16, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x75,
	0x0a, 0x17, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x51, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x51, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x53, 0x51, 0x53, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x71, 0x0a, 0x13, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x43, 0x50, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x47, 0x43, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x71,
	0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x52, 0x0a, 0x19, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x42, 0x0a, 0x11, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x4e, 0x53, 0x51, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x4e, 0x53, 0x51, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65,
	0x4d, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d,
	0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x72, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x4e, 0x41, 0x54, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x53, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x79, 0x0a, 0x1b, 0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x4e,
	0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x79, 0x0a, 0x1b, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x0d, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0xcc, 0x09, 0x0a, 0x0d, 0x47, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x4d, 0x51, 0x50, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x41, 0x4d, 0x51, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x4d, 0x51,
	0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x51, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x51, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x51,
	0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x47, 0x43, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4e, 0x53, 0x51,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4e, 0x53, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x53,
	0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x4d, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x4d, 0x51, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x53, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x41,
	0x54, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x53, 0x4a,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x56, 0x0a, 0x11, 0x73, 0x68, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_services_cs_services_grpccollector_proto_rawDescOnce sync.Once
	file_services_cs_services_grpccollector_proto_rawDescData = file_services_cs_services_grpccollector_proto_rawDesc
)

func file_services_cs_services_grpccollector_proto_rawDescGZIP() []byte {
	file_services_cs_services_grpccollector_proto_rawDescOnce.Do(func() {
		file_services_cs_services_grpccollector_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_cs_services_grpccollector_proto_rawDescData)
	})
	return file_services_cs_services_grpccollector_proto_rawDescData
}

var file_services_cs_services_grpccollector_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_services_cs_services_grpccollector_proto_goTypes = []interface{}{
	(*GenericRecordRequest)(nil),        // 0: services.GenericRecordRequest
	(*GenericRecordResponse)(nil),       // 1: services.GenericRecordResponse
	(*AMQPRecordRequest)(nil),           // 2: services.AMQPRecordRequest
	(*AMQPRecordResponse)(nil),          // 3: services.AMQPRecordResponse
	(*KafkaSinkRecordRequest)(nil),      // 4: services.KafkaSinkRecordRequest
	(*KafkaSinkRecordResponse)(nil),     // 5: services.KafkaSinkRecordResponse
	(*SQSRecordRequest)(nil),            // 6: services.SQSRecordRequest
	(*SQSRecordResponse)(nil),           // 7: services.SQSRecordResponse
	(*AzureRecordRequest)(nil),          // 8: services.AzureRecordRequest
	(*AzureRecordResponse)(nil),         // 9: services.AzureRecordResponse
	(*GCPRecordRequest)(nil),            // 10: services.GCPRecordRequest
	(*GCPRecordResponse)(nil),           // 11: services.GCPRecordResponse
	(*RedisRecordRequest)(nil),          // 12: services.RedisRecordRequest
	(*RedisRecordResponse)(nil),         // 13: services.RedisRecordResponse
	(*RedisStreamsRecordRequest)(nil),   // 14: services.RedisStreamsRecordRequest
	(*RedisStreamsRecordResponse)(nil),  // 15: services.RedisStreamsRecordResponse
	(*MQTTRecordRequest)(nil),           // 16: services.MQTTRecordRequest
	(*MQTTRecordResponse)(nil),          // 17: services.MQTTRecordResponse
	(*NSQRecordRequest)(nil),            // 18: services.NSQRecordRequest
	(*NSQRecordResponse)(nil),           // 19: services.NSQRecordResponse
	(*KubeMQRecordRequest)(nil),         // 20: services.KubeMQRecordRequest
	(*KubeMQRecordResponse)(nil),        // 21: services.KubeMQRecordResponse
	(*NATSRecordRequest)(nil),           // 22: services.NATSRecordRequest
	(*NATSRecordResponse)(nil),          // 23: services.NATSRecordResponse
	(*NATSJetStreamRecordRequest)(nil),  // 24: services.NATSJetStreamRecordRequest
	(*NATSJetStreamRecordResponse)(nil), // 25: services.NATSJetStreamRecordResponse
	(*NATSStreamingRecordRequest)(nil),  // 26: services.NATSStreamingRecordRequest
	(*NATSStreamingRecordResponse)(nil), // 27: services.NATSStreamingRecordResponse
	(*TestRequest)(nil),                 // 28: services.TestRequest
	(*TestResponse)(nil),                // 29: services.TestResponse
	(*records.GenericRecord)(nil),       // 30: records.GenericRecord
	(*common.Status)(nil),               // 31: events.Status
	(*records.AMQPSinkRecord)(nil),      // 32: records.AMQPSinkRecord
	(*records.KafkaSinkRecord)(nil),     // 33: records.KafkaSinkRecord
	(*records.SQSRecord)(nil),           // 34: records.SQSRecord
	(*records.AzureSinkRecord)(nil),     // 35: records.AzureSinkRecord
	(*records.GCPRecord)(nil),           // 36: records.GCPRecord
	(*records.RedisRecord)(nil),         // 37: records.RedisRecord
	(*records.RedisStreamsRecord)(nil),  // 38: records.RedisStreamsRecord
	(*records.MQTTRecord)(nil),          // 39: records.MQTTRecord
	(*records.NSQRecord)(nil),           // 40: records.NSQRecord
	(*records.KubeMQRecord)(nil),        // 41: records.KubeMQRecord
	(*records.NATSRecord)(nil),          // 42: records.NATSRecord
	(*records.NATSJetStreamRecord)(nil), // 43: records.NATSJetStreamRecord
	(*records.NATSStreamingRecord)(nil), // 44: records.NATSStreamingRecord
}
var file_services_cs_services_grpccollector_proto_depIdxs = []int32{
	30, // 0: services.GenericRecordRequest.records:type_name -> records.GenericRecord
	31, // 1: services.GenericRecordResponse.status:type_name -> events.Status
	32, // 2: services.AMQPRecordRequest.records:type_name -> records.AMQPSinkRecord
	31, // 3: services.AMQPRecordResponse.status:type_name -> events.Status
	33, // 4: services.KafkaSinkRecordRequest.records:type_name -> records.KafkaSinkRecord
	31, // 5: services.KafkaSinkRecordResponse.status:type_name -> events.Status
	34, // 6: services.SQSRecordRequest.records:type_name -> records.SQSRecord
	31, // 7: services.SQSRecordResponse.status:type_name -> events.Status
	35, // 8: services.AzureRecordRequest.records:type_name -> records.AzureSinkRecord
	31, // 9: services.AzureRecordResponse.status:type_name -> events.Status
	36, // 10: services.GCPRecordRequest.records:type_name -> records.GCPRecord
	31, // 11: services.GCPRecordResponse.status:type_name -> events.Status
	37, // 12: services.RedisRecordRequest.records:type_name -> records.RedisRecord
	31, // 13: services.RedisRecordResponse.status:type_name -> events.Status
	38, // 14: services.RedisStreamsRecordRequest.records:type_name -> records.RedisStreamsRecord
	31, // 15: services.RedisStreamsRecordResponse.status:type_name -> events.Status
	39, // 16: services.MQTTRecordRequest.records:type_name -> records.MQTTRecord
	31, // 17: services.MQTTRecordResponse.status:type_name -> events.Status
	40, // 18: services.NSQRecordRequest.records:type_name -> records.NSQRecord
	31, // 19: services.NSQRecordResponse.status:type_name -> events.Status
	41, // 20: services.KubeMQRecordRequest.records:type_name -> records.KubeMQRecord
	31, // 21: services.KubeMQRecordResponse.status:type_name -> events.Status
	42, // 22: services.NATSRecordRequest.records:type_name -> records.NATSRecord
	31, // 23: services.NATSRecordResponse.status:type_name -> events.Status
	43, // 24: services.NATSJetStreamRecordRequest.records:type_name -> records.NATSJetStreamRecord
	31, // 25: services.NATSJetStreamRecordResponse.status:type_name -> events.Status
	44, // 26: services.NATSStreamingRecordRequest.records:type_name -> records.NATSStreamingRecord
	31, // 27: services.NATSStreamingRecordResponse.status:type_name -> events.Status
	31, // 28: services.TestResponse.status:type_name -> events.Status
	0,  // 29: services.GRPCCollector.AddRecord:input_type -> services.GenericRecordRequest
	2,  // 30: services.GRPCCollector.AddAMQPRecord:input_type -> services.AMQPRecordRequest
	4,  // 31: services.GRPCCollector.AddKafkaRecord:input_type -> services.KafkaSinkRecordRequest
	6,  // 32: services.GRPCCollector.AddSQSRecord:input_type -> services.SQSRecordRequest
	8,  // 33: services.GRPCCollector.AddAzureRecord:input_type -> services.AzureRecordRequest
	10, // 34: services.GRPCCollector.AddGCPRecord:input_type -> services.GCPRecordRequest
	12, // 35: services.GRPCCollector.AddRedisRecord:input_type -> services.RedisRecordRequest
	14, // 36: services.GRPCCollector.AddRedisStreamsRecord:input_type -> services.RedisStreamsRecordRequest
	16, // 37: services.GRPCCollector.AddMQTTRecord:input_type -> services.MQTTRecordRequest
	18, // 38: services.GRPCCollector.AddNSQRecord:input_type -> services.NSQRecordRequest
	20, // 39: services.GRPCCollector.AddKubeMQRecord:input_type -> services.KubeMQRecordRequest
	22, // 40: services.GRPCCollector.AddNATSRecord:input_type -> services.NATSRecordRequest
	26, // 41: services.GRPCCollector.AddNATSStreamingRecord:input_type -> services.NATSStreamingRecordRequest
	24, // 42: services.GRPCCollector.AddNATSJetStreamRecord:input_type -> services.NATSJetStreamRecordRequest
	28, // 43: services.GRPCCollector.Test:input_type -> services.TestRequest
	1,  // 44: services.GRPCCollector.AddRecord:output_type -> services.GenericRecordResponse
	3,  // 45: services.GRPCCollector.AddAMQPRecord:output_type -> services.AMQPRecordResponse
	5,  // 46: services.GRPCCollector.AddKafkaRecord:output_type -> services.KafkaSinkRecordResponse
	7,  // 47: services.GRPCCollector.AddSQSRecord:output_type -> services.SQSRecordResponse
	9,  // 48: services.GRPCCollector.AddAzureRecord:output_type -> services.AzureRecordResponse
	11, // 49: services.GRPCCollector.AddGCPRecord:output_type -> services.GCPRecordResponse
	13, // 50: services.GRPCCollector.AddRedisRecord:output_type -> services.RedisRecordResponse
	15, // 51: services.GRPCCollector.AddRedisStreamsRecord:output_type -> services.RedisStreamsRecordResponse
	17, // 52: services.GRPCCollector.AddMQTTRecord:output_type -> services.MQTTRecordResponse
	19, // 53: services.GRPCCollector.AddNSQRecord:output_type -> services.NSQRecordResponse
	21, // 54: services.GRPCCollector.AddKubeMQRecord:output_type -> services.KubeMQRecordResponse
	23, // 55: services.GRPCCollector.AddNATSRecord:output_type -> services.NATSRecordResponse
	27, // 56: services.GRPCCollector.AddNATSStreamingRecord:output_type -> services.NATSStreamingRecordResponse
	25, // 57: services.GRPCCollector.AddNATSJetStreamRecord:output_type -> services.NATSJetStreamRecordResponse
	29, // 58: services.GRPCCollector.Test:output_type -> services.TestResponse
	44, // [44:59] is the sub-list for method output_type
	29, // [29:44] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_services_cs_services_grpccollector_proto_init() }
func file_services_cs_services_grpccollector_proto_init() {
	if File_services_cs_services_grpccollector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_cs_services_grpccollector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMQPRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMQPRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaSinkRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaSinkRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisStreamsRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisStreamsRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NSQRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NSQRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeMQRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeMQRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSJetStreamRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSJetStreamRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSStreamingRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATSStreamingRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_cs_services_grpccollector_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_cs_services_grpccollector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_cs_services_grpccollector_proto_goTypes,
		DependencyIndexes: file_services_cs_services_grpccollector_proto_depIdxs,
		MessageInfos:      file_services_cs_services_grpccollector_proto_msgTypes,
	}.Build()
	File_services_cs_services_grpccollector_proto = out.File
	file_services_cs_services_grpccollector_proto_rawDesc = nil
	file_services_cs_services_grpccollector_proto_goTypes = nil
	file_services_cs_services_grpccollector_proto_depIdxs = nil
}
