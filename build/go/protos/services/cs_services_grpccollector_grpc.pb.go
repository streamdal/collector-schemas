// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: services/cs_services_grpccollector.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCCollectorClient is the client API for GRPCCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCCollectorClient interface {
	AddRecord(ctx context.Context, in *GenericRecordRequest, opts ...grpc.CallOption) (*GenericRecordResponse, error)
	AddAMQPRecord(ctx context.Context, in *AMQPRecordRequest, opts ...grpc.CallOption) (*AMQPRecordResponse, error)
	AddKafkaRecord(ctx context.Context, in *KafkaSinkRecordRequest, opts ...grpc.CallOption) (*KafkaSinkRecordResponse, error)
	AddSQSRecord(ctx context.Context, in *SQSRecordRequest, opts ...grpc.CallOption) (*SQSRecordResponse, error)
	AddAzureRecord(ctx context.Context, in *AzureRecordRequest, opts ...grpc.CallOption) (*AzureRecordResponse, error)
	AddGCPRecord(ctx context.Context, in *GCPRecordRequest, opts ...grpc.CallOption) (*GCPRecordResponse, error)
	AddRedisRecord(ctx context.Context, in *RedisRecordRequest, opts ...grpc.CallOption) (*RedisRecordResponse, error)
	AddRedisStreamsRecord(ctx context.Context, in *RedisStreamsRecordRequest, opts ...grpc.CallOption) (*RedisStreamsRecordResponse, error)
	AddMQTTRecord(ctx context.Context, in *MQTTRecordRequest, opts ...grpc.CallOption) (*MQTTRecordResponse, error)
	AddNSQRecord(ctx context.Context, in *NSQRecordRequest, opts ...grpc.CallOption) (*NSQRecordResponse, error)
	AddKubeMQRecord(ctx context.Context, in *KubeMQRecordRequest, opts ...grpc.CallOption) (*KubeMQRecordResponse, error)
	AddNATSRecord(ctx context.Context, in *NATSRecordRequest, opts ...grpc.CallOption) (*NATSRecordResponse, error)
	AddNATSStreamingRecord(ctx context.Context, in *NATSStreamingRecordRequest, opts ...grpc.CallOption) (*NATSStreamingRecordResponse, error)
	AddNATSJetStreamRecord(ctx context.Context, in *NATSJetStreamRecordRequest, opts ...grpc.CallOption) (*NATSJetStreamRecordResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type gRPCCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCCollectorClient(cc grpc.ClientConnInterface) GRPCCollectorClient {
	return &gRPCCollectorClient{cc}
}

func (c *gRPCCollectorClient) AddRecord(ctx context.Context, in *GenericRecordRequest, opts ...grpc.CallOption) (*GenericRecordResponse, error) {
	out := new(GenericRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddAMQPRecord(ctx context.Context, in *AMQPRecordRequest, opts ...grpc.CallOption) (*AMQPRecordResponse, error) {
	out := new(AMQPRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddAMQPRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddKafkaRecord(ctx context.Context, in *KafkaSinkRecordRequest, opts ...grpc.CallOption) (*KafkaSinkRecordResponse, error) {
	out := new(KafkaSinkRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddKafkaRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddSQSRecord(ctx context.Context, in *SQSRecordRequest, opts ...grpc.CallOption) (*SQSRecordResponse, error) {
	out := new(SQSRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddSQSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddAzureRecord(ctx context.Context, in *AzureRecordRequest, opts ...grpc.CallOption) (*AzureRecordResponse, error) {
	out := new(AzureRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddAzureRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddGCPRecord(ctx context.Context, in *GCPRecordRequest, opts ...grpc.CallOption) (*GCPRecordResponse, error) {
	out := new(GCPRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddGCPRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddRedisRecord(ctx context.Context, in *RedisRecordRequest, opts ...grpc.CallOption) (*RedisRecordResponse, error) {
	out := new(RedisRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRedisRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddRedisStreamsRecord(ctx context.Context, in *RedisStreamsRecordRequest, opts ...grpc.CallOption) (*RedisStreamsRecordResponse, error) {
	out := new(RedisStreamsRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddRedisStreamsRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddMQTTRecord(ctx context.Context, in *MQTTRecordRequest, opts ...grpc.CallOption) (*MQTTRecordResponse, error) {
	out := new(MQTTRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddMQTTRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddNSQRecord(ctx context.Context, in *NSQRecordRequest, opts ...grpc.CallOption) (*NSQRecordResponse, error) {
	out := new(NSQRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddNSQRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddKubeMQRecord(ctx context.Context, in *KubeMQRecordRequest, opts ...grpc.CallOption) (*KubeMQRecordResponse, error) {
	out := new(KubeMQRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddKubeMQRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddNATSRecord(ctx context.Context, in *NATSRecordRequest, opts ...grpc.CallOption) (*NATSRecordResponse, error) {
	out := new(NATSRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddNATSRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddNATSStreamingRecord(ctx context.Context, in *NATSStreamingRecordRequest, opts ...grpc.CallOption) (*NATSStreamingRecordResponse, error) {
	out := new(NATSStreamingRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddNATSStreamingRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) AddNATSJetStreamRecord(ctx context.Context, in *NATSJetStreamRecordRequest, opts ...grpc.CallOption) (*NATSJetStreamRecordResponse, error) {
	out := new(NATSJetStreamRecordResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/AddNATSJetStreamRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCCollectorClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/services.GRPCCollector/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCCollectorServer is the server API for GRPCCollector service.
// All implementations should embed UnimplementedGRPCCollectorServer
// for forward compatibility
type GRPCCollectorServer interface {
	AddRecord(context.Context, *GenericRecordRequest) (*GenericRecordResponse, error)
	AddAMQPRecord(context.Context, *AMQPRecordRequest) (*AMQPRecordResponse, error)
	AddKafkaRecord(context.Context, *KafkaSinkRecordRequest) (*KafkaSinkRecordResponse, error)
	AddSQSRecord(context.Context, *SQSRecordRequest) (*SQSRecordResponse, error)
	AddAzureRecord(context.Context, *AzureRecordRequest) (*AzureRecordResponse, error)
	AddGCPRecord(context.Context, *GCPRecordRequest) (*GCPRecordResponse, error)
	AddRedisRecord(context.Context, *RedisRecordRequest) (*RedisRecordResponse, error)
	AddRedisStreamsRecord(context.Context, *RedisStreamsRecordRequest) (*RedisStreamsRecordResponse, error)
	AddMQTTRecord(context.Context, *MQTTRecordRequest) (*MQTTRecordResponse, error)
	AddNSQRecord(context.Context, *NSQRecordRequest) (*NSQRecordResponse, error)
	AddKubeMQRecord(context.Context, *KubeMQRecordRequest) (*KubeMQRecordResponse, error)
	AddNATSRecord(context.Context, *NATSRecordRequest) (*NATSRecordResponse, error)
	AddNATSStreamingRecord(context.Context, *NATSStreamingRecordRequest) (*NATSStreamingRecordResponse, error)
	AddNATSJetStreamRecord(context.Context, *NATSJetStreamRecordRequest) (*NATSJetStreamRecordResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedGRPCCollectorServer should be embedded to have forward compatible implementations.
type UnimplementedGRPCCollectorServer struct {
}

func (UnimplementedGRPCCollectorServer) AddRecord(context.Context, *GenericRecordRequest) (*GenericRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddAMQPRecord(context.Context, *AMQPRecordRequest) (*AMQPRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAMQPRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddKafkaRecord(context.Context, *KafkaSinkRecordRequest) (*KafkaSinkRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKafkaRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddSQSRecord(context.Context, *SQSRecordRequest) (*SQSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSQSRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddAzureRecord(context.Context, *AzureRecordRequest) (*AzureRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddGCPRecord(context.Context, *GCPRecordRequest) (*GCPRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGCPRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddRedisRecord(context.Context, *RedisRecordRequest) (*RedisRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedisRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddRedisStreamsRecord(context.Context, *RedisStreamsRecordRequest) (*RedisStreamsRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedisStreamsRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddMQTTRecord(context.Context, *MQTTRecordRequest) (*MQTTRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMQTTRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddNSQRecord(context.Context, *NSQRecordRequest) (*NSQRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNSQRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddKubeMQRecord(context.Context, *KubeMQRecordRequest) (*KubeMQRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKubeMQRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddNATSRecord(context.Context, *NATSRecordRequest) (*NATSRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNATSRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddNATSStreamingRecord(context.Context, *NATSStreamingRecordRequest) (*NATSStreamingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNATSStreamingRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) AddNATSJetStreamRecord(context.Context, *NATSJetStreamRecordRequest) (*NATSJetStreamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNATSJetStreamRecord not implemented")
}
func (UnimplementedGRPCCollectorServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

// UnsafeGRPCCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCCollectorServer will
// result in compilation errors.
type UnsafeGRPCCollectorServer interface {
	mustEmbedUnimplementedGRPCCollectorServer()
}

func RegisterGRPCCollectorServer(s grpc.ServiceRegistrar, srv GRPCCollectorServer) {
	s.RegisterService(&GRPCCollector_ServiceDesc, srv)
}

func _GRPCCollector_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRecord(ctx, req.(*GenericRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddAMQPRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMQPRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddAMQPRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddAMQPRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddAMQPRecord(ctx, req.(*AMQPRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddKafkaRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaSinkRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddKafkaRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddKafkaRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddKafkaRecord(ctx, req.(*KafkaSinkRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddSQSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddSQSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddSQSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddSQSRecord(ctx, req.(*SQSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddAzureRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AzureRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddAzureRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddAzureRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddAzureRecord(ctx, req.(*AzureRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddGCPRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCPRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddGCPRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddGCPRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddGCPRecord(ctx, req.(*GCPRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddRedisRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRedisRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRedisRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRedisRecord(ctx, req.(*RedisRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddRedisStreamsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisStreamsRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddRedisStreamsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddRedisStreamsRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddRedisStreamsRecord(ctx, req.(*RedisStreamsRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddMQTTRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MQTTRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddMQTTRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddMQTTRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddMQTTRecord(ctx, req.(*MQTTRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddNSQRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddNSQRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddNSQRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddNSQRecord(ctx, req.(*NSQRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddKubeMQRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubeMQRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddKubeMQRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddKubeMQRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddKubeMQRecord(ctx, req.(*KubeMQRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddNATSRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NATSRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddNATSRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddNATSRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddNATSRecord(ctx, req.(*NATSRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddNATSStreamingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NATSStreamingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddNATSStreamingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddNATSStreamingRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddNATSStreamingRecord(ctx, req.(*NATSStreamingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_AddNATSJetStreamRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NATSJetStreamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).AddNATSJetStreamRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/AddNATSJetStreamRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).AddNATSJetStreamRecord(ctx, req.(*NATSJetStreamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCCollector_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCCollectorServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.GRPCCollector/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCCollectorServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCCollector_ServiceDesc is the grpc.ServiceDesc for GRPCCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.GRPCCollector",
	HandlerType: (*GRPCCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _GRPCCollector_AddRecord_Handler,
		},
		{
			MethodName: "AddAMQPRecord",
			Handler:    _GRPCCollector_AddAMQPRecord_Handler,
		},
		{
			MethodName: "AddKafkaRecord",
			Handler:    _GRPCCollector_AddKafkaRecord_Handler,
		},
		{
			MethodName: "AddSQSRecord",
			Handler:    _GRPCCollector_AddSQSRecord_Handler,
		},
		{
			MethodName: "AddAzureRecord",
			Handler:    _GRPCCollector_AddAzureRecord_Handler,
		},
		{
			MethodName: "AddGCPRecord",
			Handler:    _GRPCCollector_AddGCPRecord_Handler,
		},
		{
			MethodName: "AddRedisRecord",
			Handler:    _GRPCCollector_AddRedisRecord_Handler,
		},
		{
			MethodName: "AddRedisStreamsRecord",
			Handler:    _GRPCCollector_AddRedisStreamsRecord_Handler,
		},
		{
			MethodName: "AddMQTTRecord",
			Handler:    _GRPCCollector_AddMQTTRecord_Handler,
		},
		{
			MethodName: "AddNSQRecord",
			Handler:    _GRPCCollector_AddNSQRecord_Handler,
		},
		{
			MethodName: "AddKubeMQRecord",
			Handler:    _GRPCCollector_AddKubeMQRecord_Handler,
		},
		{
			MethodName: "AddNATSRecord",
			Handler:    _GRPCCollector_AddNATSRecord_Handler,
		},
		{
			MethodName: "AddNATSStreamingRecord",
			Handler:    _GRPCCollector_AddNATSStreamingRecord_Handler,
		},
		{
			MethodName: "AddNATSJetStreamRecord",
			Handler:    _GRPCCollector_AddNATSJetStreamRecord_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _GRPCCollector_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/cs_services_grpccollector.proto",
}
