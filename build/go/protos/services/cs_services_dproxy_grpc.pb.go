// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: services/cs_services_dproxy.proto

package services

import (
	context "context"
	events "github.com/batchcorp/collector-schemas/build/go/protos/events"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DProxyClient is the client API for DProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DProxyClient interface {
	Connect(ctx context.Context, in *events.Tunnel, opts ...grpc.CallOption) (DProxy_ConnectClient, error)
	Auth(ctx context.Context, in *events.AuthRequest, opts ...grpc.CallOption) (*events.AuthResponse, error)
	DeleteTunnel(ctx context.Context, in *events.DeleteTunnelRequest, opts ...grpc.CallOption) (*events.DeleteTunnelResponse, error)
}

type dProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewDProxyClient(cc grpc.ClientConnInterface) DProxyClient {
	return &dProxyClient{cc}
}

func (c *dProxyClient) Connect(ctx context.Context, in *events.Tunnel, opts ...grpc.CallOption) (DProxy_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DProxy_ServiceDesc.Streams[0], "/services.DProxy/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &dProxyConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DProxy_ConnectClient interface {
	Recv() (*events.Tunnel, error)
	grpc.ClientStream
}

type dProxyConnectClient struct {
	grpc.ClientStream
}

func (x *dProxyConnectClient) Recv() (*events.Tunnel, error) {
	m := new(events.Tunnel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dProxyClient) Auth(ctx context.Context, in *events.AuthRequest, opts ...grpc.CallOption) (*events.AuthResponse, error) {
	out := new(events.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.DProxy/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dProxyClient) DeleteTunnel(ctx context.Context, in *events.DeleteTunnelRequest, opts ...grpc.CallOption) (*events.DeleteTunnelResponse, error) {
	out := new(events.DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/services.DProxy/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DProxyServer is the server API for DProxy service.
// All implementations should embed UnimplementedDProxyServer
// for forward compatibility
type DProxyServer interface {
	Connect(*events.Tunnel, DProxy_ConnectServer) error
	Auth(context.Context, *events.AuthRequest) (*events.AuthResponse, error)
	DeleteTunnel(context.Context, *events.DeleteTunnelRequest) (*events.DeleteTunnelResponse, error)
}

// UnimplementedDProxyServer should be embedded to have forward compatible implementations.
type UnimplementedDProxyServer struct {
}

func (UnimplementedDProxyServer) Connect(*events.Tunnel, DProxy_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDProxyServer) Auth(context.Context, *events.AuthRequest) (*events.AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedDProxyServer) DeleteTunnel(context.Context, *events.DeleteTunnelRequest) (*events.DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}

// UnsafeDProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DProxyServer will
// result in compilation errors.
type UnsafeDProxyServer interface {
	mustEmbedUnimplementedDProxyServer()
}

func RegisterDProxyServer(s grpc.ServiceRegistrar, srv DProxyServer) {
	s.RegisterService(&DProxy_ServiceDesc, srv)
}

func _DProxy_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(events.Tunnel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DProxyServer).Connect(m, &dProxyConnectServer{stream})
}

type DProxy_ConnectServer interface {
	Send(*events.Tunnel) error
	grpc.ServerStream
}

type dProxyConnectServer struct {
	grpc.ServerStream
}

func (x *dProxyConnectServer) Send(m *events.Tunnel) error {
	return x.ServerStream.SendMsg(m)
}

func _DProxy_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DProxyServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DProxy/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DProxyServer).Auth(ctx, req.(*events.AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DProxy_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DProxyServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DProxy/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DProxyServer).DeleteTunnel(ctx, req.(*events.DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DProxy_ServiceDesc is the grpc.ServiceDesc for DProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.DProxy",
	HandlerType: (*DProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _DProxy_Auth_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _DProxy_DeleteTunnel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DProxy_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/cs_services_dproxy.proto",
}
